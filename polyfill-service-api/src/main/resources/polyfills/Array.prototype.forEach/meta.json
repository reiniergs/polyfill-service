{"aliases":["default-3.3","default-3.4","default-3.5","default-3.6","default","es5","modernizr:es5array","blissfuljs"],"browsers":{"ie":"6 - 8"},"spec":"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.foreach","docs":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach","detectSource":"'forEach' in Array.prototype","testSource":"","baseDir":"Array/prototype/forEach","hasTests":true,"testsSource":"/* eslint-env mocha, browser*/\n/* global proclaim, it */\n\nvar createArrayLikeFromArray = function createArrayLikeFromArray(arr) {\n\tvar o = {};\n\tArray.prototype.forEach.call(arr, function (e, i) {\n\t\to[i] = e;\n\t});\n\to.length = arr.length;\n\treturn o;\n};\n\nvar testSubject, expected, actual;\n\nbeforeEach(function () {\n\ttestSubject = [2, 3, undefined, true, 'hej', null, false, 0];\n\tdelete testSubject[1];\n\texpected = {0: 2, 2: undefined, 3: true, 4: 'hej', 5: null, 6: false, 7: 0 };\n\tactual = {};\n});\n\n\nit('should pass the right parameters', function () {\n\tvar args = [];\n\tvar argsspy = function() { args = [].slice.call(arguments); }\n\tvar array = ['1'];\n\tarray.forEach(argsspy);\n\tproclaim.deepEqual(args, ['1', 0, array]);\n});\nit('should not affect elements added to the array after it has begun', function () {\n\tvar arr = [1,2,3],\n\t\ti = 0;\n\tarr.forEach(function (a) {\n\t\ti++;\n\t\tarr.push(a + 3);\n\t});\n\tproclaim.deepEqual(arr, [1,2,3,4,5,6]);\n\tproclaim.equal(i, 3);\n});\n\nit('should set the right context when given none', function () {\n\tvar context;\n\t[1].forEach(function () { context = this; });\n\tproclaim.strictEqual(context, function () { return this; }.call());\n});\n\n// IE6-8 does not distinguish between dense and sparse arrays\n// it('should iterate all', function () {\n// \ttestSubject.forEach(function (obj, index) {\n// \t\tactual[index] = obj;\n// \t});\n\n// \tproclaim.deepEqual(actual, expected);\n// });\n\n// it('should iterate all using a context', function () {\n// \tvar o = { a: actual };\n\n// \ttestSubject.forEach(function (obj, index) {\n// \t\tthis.a[index] = obj;\n// \t}, o);\n// \tproclaim.deepEqual(actual, expected);\n// });\n\n// it('should iterate all in an array-like object', function () {\n// \tvar ts = createArrayLikeFromArray(testSubject);\n\n// \tArray.prototype.forEach.call(ts, function (obj, index) {\n// \t\tactual[index] = obj;\n// \t});\n\n// \tproclaim.deepEqual(actual, expected);\n// });\n\n// it('should iterate all in an array-like object using a context', function () {\n// \tvar ts = createArrayLikeFromArray(testSubject),\n// \t\to = { a: actual };\n\n// \tArray.prototype.forEach.call(ts, function (obj, index) {\n// \t\tthis.a[index] = obj;\n// \t}, o);\n// \tproclaim.deepEqual(actual, expected);\n// });\n\ndescribe('strings', function () {\n\tvar str = 'Hello, World!';\n\n\tit('should iterate all in a string', function () {\n\t\tactual = [];\n\n\t\tArray.prototype.forEach.call(str, function (item, index) {\n\t\t\tactual[index] = item;\n\t\t});\n\n\t\tproclaim.deepEqual(actual, str.split(''));\n\t});\n\n\tit('should iterate all in a string using a context', function () {\n\t\tactual = [];\n\n\t\tvar o = { a: actual };\n\n\t\tArray.prototype.forEach.call(str, function (item, index) {\n\t\t\tthis.a[index] = item;\n\t\t}, o);\n\n\t\tproclaim.deepEqual(actual, str.split(''));\n\t});\n});\n\nit('should have a boxed object as list argument of callback', function () {\n\tvar actual;\n\n\tArray.prototype.forEach.call('foo', function (item, index, list) {\n\t\tactual = list;\n\t});\n\n\tproclaim.isTypeOf(actual, 'object');\n\tproclaim.equal(Object.prototype.toString.call(actual), '[object String]');\n});"}