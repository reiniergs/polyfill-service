{"aliases":["default-3.3","default-3.4","default-3.5","default-3.6","default","caniuse:matchesselector","blissfuljs"],"browsers":{"ie":"6 - *","chrome":"* - 33","firefox":"* - 33","safari":"4 - 7.0","opera":"* - 20","op_mini":"*","op_mob":"* - 32","android":"* - 4.4.4","bb":"*","ios_chr":"*","ios_saf":"* - 7"},"dependencies":["Element","document.querySelector"],"docs":"https://developer.mozilla.org/en-US/docs/Web/API/Element/matches","spec":"http://dom.spec.whatwg.org/#dom-element-matches","detectSource":"'document' in this && \"matches\" in document.documentElement","testSource":"","baseDir":"Element/prototype/matches","hasTests":true,"testsSource":"/* eslint-env mocha, browser*/\n/* global proclaim, it */\n\nit(\"should return true if the element matches the tag selector\", function() {\n\tvar el = document.body.appendChild(document.createElement(\"p\"));\n\n\tproclaim.equal(el.matches(\"p\"), true);\n\n\tdocument.body.removeChild(el);\n});\n\nit(\"should return true if the element matches the class selector\", function() {\n\tvar el = document.body.appendChild(document.createElement(\"p\"));\n\n\tel.className = \"foo\";\n\n\tproclaim.equal(el.matches(\".foo\"), true);\n\n\tdocument.body.removeChild(el);\n});\n\nit(\"should return true for more complex selectors\", function() {\n\tvar el = document.body.appendChild(document.createElement(\"p\"));\n\n\tel.className = \"foo\";\n\n\tproclaim.equal(el.matches(\"p.foo\"), true);\n});\n\nit(\"should not match non-matching selectors\", function() {\n\tvar el = document.body.appendChild(document.createElement(\"p\"));\n\n\tel.className = \"bar\";\n\n\tproclaim.equal(el.matches(\"a.bar\"), false);\n\n\tdocument.body.removeChild(el);\n});\n\nit(\"should not match inner elements\", function() {\n\tvar el = document.body.appendChild(document.createElement(\"p\"));\n\n\tvar innerEl = document.createElement(\"a\");\n\n\tel.appendChild(innerEl);\n\n\tproclaim.equal(el.matches(\"a\"), false);\n\n\tdocument.body.removeChild(el);\n});\n\n/* Skipped: This exception is actually thrown by querySelector, and cannot be thrown by\n * the polyfill, so this test will fail in some UAs. For more info see querySelector polyfill.\n *\nit(\"should throw an exception with an invalid selector\", function() {\n\tvar el = document.body.appendChild(document.createElement(\"p\"));\n\n\tproclaim.throws(function () {\n\t\tel.matches(\"an>invalid<:selector\");\n\t});\n\n\tdocument.body.removeChild(el);\n});\n */"}