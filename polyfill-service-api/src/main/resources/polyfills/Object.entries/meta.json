{"aliases":["es2017"],"browsers":{"ie":"9 - 14","ie_mob":"*","chrome":"< 51","ios_chr":"*","safari":"*","ios_saf":"*","firefox":"< 47","firefox_mob":"< 47","android":"< 51","opera":"*","op_mob":"*","op_mini":"*","samsung_mob":"*","bb":"*"},"dependencies":["Array.prototype.reduce","Object.keys"],"docs":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries","detectSource":"'entries' in Object","testSource":"","baseDir":"Object/entries","hasTests":true,"testsSource":"/* eslint-env mocha, browser*/\n/* global proclaim, it */\n\n// Modified version of the test262 tests located at\n// https://github.com/tc39/test262/tree/master/test/built-ins/Object/entries\n// Copyright (C) 2015 Jordan Harband. All rights reserved.\n// This code is governed by the BSD license.\n\nvar arePropertyDescriptorsSupported = function() {\n\tvar obj = {};\n\ttry {\n\t\tObject.defineProperty(obj, 'x', {\n\t\t\tenumerable: false,\n\t\t\tvalue: obj\n\t\t});\n\t\t/* eslint-disable no-unused-vars, no-restricted-syntax */\n\t\tfor (var _ in obj) {\n\t\t\treturn false;\n\t\t}\n\t\t/* eslint-enable no-unused-vars, no-restricted-syntax */\n\t\treturn obj.x === obj;\n\t} catch (e) { // this is IE 8.\n\t\treturn false;\n\t}\n};\n\nvar supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();\n\nvar functionsHaveNames = (function foo() {}).name === 'foo';\n\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';\n\nvar objectKeysWorksWithPrimitives = (function() {\n\ttry {\n\t\treturn Object.keys(2) === undefined;\n\t} catch (e) {\n\t\treturn false;\n\t}\n}());\n\nit('should have name `entries`', function() {\n\tif (functionsHaveNames) {\n\t\tproclaim.equal(Object.entries.name, 'entries');\n\t} else {\n\t\tthis.skip();\n\t}\n});\n\nit('has length `1`', function() {\n\tproclaim.equal(Object.entries.length, 1);\n});\n\nit('should terminate if getting a value throws an exception', function() {\n\tproclaim.throws(function() {\n\t\tObject.entries({\n\t\t\tget a() {\n\t\t\t\tthrow new Error('This is the thrown error');\n\t\t\t},\n\t\t\tget b() {\n\t\t\t\tthrow new Error();\n\t\t\t}\n\t\t});\n\t}, Error, 'This is the thrown error');\n});\n\nit('should throw TypeError when called with `null`', function() {\n\tproclaim.throws(function() {\n\t\tObject.entries(null);\n\t}, TypeError);\n});\n\nit('should throw TypeError when called with `undefined`', function() {\n\tproclaim.throws(function() {\n\t\tObject.entries(undefined);\n\t}, TypeError);\n});\n\nit('does not see a new element added by a getter that is hit during iteration', function() {\n\tvar bAddsC = {\n\t\ta: 'A',\n\t\tget b() {\n\t\t\tthis.c = 'C';\n\t\t\treturn 'B';\n\t\t}\n\t};\n\n\tvar result = Object.entries(bAddsC);\n\n\tproclaim.isArray(result, 'result is an array');\n\tproclaim.equal(result.length, 2, 'result has 2 items');\n\n\tproclaim.isArray(result[0], 'first entry is an array');\n\tproclaim.isArray(result[1], 'second entry is an array');\n\n\tproclaim.deepEqual(result, [\n\t\t['a', 'A'],\n\t\t['b', 'B']\n\t]);\n});\n\nit('does not see an element made non-enumerable by a getter that is hit during iteration', function() {\n\tif (supportsDescriptors) {\n\n\t\tvar bDeletesC = {\n\t\t\ta: 'A',\n\t\t\tget b() {\n\t\t\t\tObject.defineProperty(this, 'c', {\n\t\t\t\t\tenumerable: false\n\t\t\t\t});\n\t\t\t\treturn 'B';\n\t\t\t},\n\t\t\tc: 'C'\n\t\t};\n\n\t\tvar result = Object.entries(bDeletesC);\n\n\t\tproclaim.isArray(result, 'result is an array');\n\t\tproclaim.equal(result.length, 2, 'result has 2 items');\n\n\t\tproclaim.isArray(result[0], 'first entry is an array');\n\t\tproclaim.isArray(result[1], 'second entry is an array');\n\n\t\tproclaim.deepEqual(result, [\n\t\t\t['a', 'A'],\n\t\t\t['b', 'B']\n\t\t]);\n\t} else {\n\t\tthis.skip();\n\t}\n});\n\nit('does not see an element removed by a getter that is hit during iteration', function() {\n\n\tvar bDeletesC = {\n\t\ta: 'A',\n\t\tget b() {\n\t\t\tdelete this.c;\n\t\t\treturn 'B';\n\t\t},\n\t\tc: 'C'\n\t};\n\n\tvar result = Object.entries(bDeletesC);\n\n\tproclaim.isArray(result, 'result is an array');\n\tproclaim.equal(result.length, 2, 'result has 2 items');\n\n\tproclaim.isArray(result[0], 'first entry is an array');\n\tproclaim.isArray(result[1], 'second entry is an array');\n\n\tproclaim.deepEqual(result, [\n\t\t['a', 'A'],\n\t\t['b', 'B']\n\t]);\n});\n\nit('does not see inherited properties', function() {\n\tvar F = function G() {};\n\tF.prototype.a = {};\n\tF.prototype.b = {};\n\n\tvar f = new F();\n\tf.b = {}; // shadow the prototype\n\tf.c = {}; // solely an own property\n\n\tvar result = Object.entries(f);\n\n\tproclaim.isArray(result, 'result is an array');\n\tproclaim.equal(result.length, 2, 'result has 2 items');\n\n\tproclaim.isArray(result[0], 'first entry is an array');\n\tproclaim.isArray(result[1], 'second entry is an array');\n\n\tproclaim.deepEqual(result, [\n\t\t['b', f.b],\n\t\t['c', f.c]\n\t]);\n});\n\nit('accepts boolean primitives', function() {\n\tif (objectKeysWorksWithPrimitives) {\n\t\tvar trueResult = Object.entries(true);\n\n\t\tproclaim.isArray(trueResult, 'trueResult is an array');\n\t\tproclaim.equal(trueResult.length, 0, 'trueResult has 0 items');\n\n\t\tvar falseResult = Object.entries(false);\n\n\t\tproclaim.isArray(falseResult, 'falseResult is an array');\n\t\tproclaim.equal(falseResult.length, 0, 'falseResult has 0 items');\n\t} else {\n\t\tthis.skip();\n\t}\n});\n\nit('accepts number primitives', function() {\n\tif (objectKeysWorksWithPrimitives) {\n\t\tproclaim.equal(Object.entries(0).length, 0, '0 has zero entries');\n\t\tproclaim.equal(Object.entries(-0).length, 0, '-0 has zero entries');\n\t\tproclaim.equal(Object.entries(Infinity).length, 0, 'Infinity has zero entries');\n\t\tproclaim.equal(Object.entries(-Infinity).length, 0, '-Infinity has zero entries');\n\t\tproclaim.equal(Object.entries(NaN).length, 0, 'NaN has zero entries');\n\t\tproclaim.equal(Object.entries(Math.PI).length, 0, 'Math.PI has zero entries');\n\t} else {\n\t\tthis.skip();\n\t}\n});\n\nit('accepts string primitives', function() {\n\tif (objectKeysWorksWithPrimitives) {\n\t\tvar result = Object.entries('abc');\n\n\t\tproclaim.isArray(result, 'result is an array');\n\t\tproclaim.equal(result.length, 3, 'result has 3 items');\n\n\t\tproclaim.deepEqual(result, [\n\t\t\t['0', 'a'],\n\t\t\t['1', 'b'],\n\t\t\t['2', 'c']\n\t\t]);\n\t} else {\n\t\tthis.skip();\n\t}\n});\n\n\nit('accepts Symbol primitives', function() {\n\tif (hasSymbols && objectKeysWorksWithPrimitives) {\n\t\tvar result = Object.entries(Symbol());\n\n\t\tproclaim.isArray(result, 'result is an array');\n\t\tproclaim.equal(result.length, 0, 'result has 0 items');\n\t} else {\n\t\tthis.skip();\n\t}\n});\n\nit('does not include Symbol keys', function() {\n\tif (hasSymbols) {\n\t\tvar value = {};\n\t\tvar enumSym = Symbol('enum');\n\t\tvar nonEnumSym = Symbol('nonenum');\n\t\tvar symValue = Symbol('value');\n\n\t\tvar obj = {\n\t\t\tkey: symValue\n\t\t};\n\t\tobj[enumSym] = value;\n\t\tObject.defineProperty(obj, nonEnumSym, {\n\t\t\tenumerable: false,\n\t\t\tvalue: value\n\t\t});\n\n\t\tvar result = Object.entries(obj);\n\n\t\tproclaim.isArray(result, 'result is an array');\n\t\tproclaim.equal(result.length, 1, 'result has 1 item');\n\n\t\tproclaim.isArray(result[0], 'first entry is an array');\n\n\t\tproclaim.deepEqual(result, [\n\t\t\t['key', symValue]\n\t\t]);\n\t} else {\n\t\tthis.skip();\n\t}\n});"}