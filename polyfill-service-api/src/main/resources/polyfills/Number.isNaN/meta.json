{"aliases":["es6","default-3.4","default-3.5","default-3.6","default"],"browsers":{"ie":"<14","ie_mob":"*","firefox":"<16","firefox_mob":"<44","chrome":"<19","android":"<4.1","safari":"<9","ios_saf":"<9","opera":"<21","op_mini":"*","op_mob":"<33","bb":"*"},"license":"MIT","spec":"http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number","docs":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN","detectSource":"'isNaN' in Number","testSource":"","baseDir":"Number/isNaN","hasTests":true,"testsSource":"/* eslint-env mocha, browser*/\n/* global proclaim, it */\n\nit('has correct instance', function () {\n\tproclaim.isInstanceOf(Number.isNaN, Function);\n});\n\nit('has correct argument length', function () {\n\tproclaim.equal(Number.isNaN.length, 1);\n});\n\nit('returns true with NaN values', function () {\n\tproclaim.equal(Number.isNaN(NaN), true);\n\tproclaim.equal(Number.isNaN(Number.NaN), true);\n\tproclaim.equal(Number.isNaN(0/0), true);\n});\n\nit('retuns false for valid numbers and non-number data types', function () {\n\tproclaim.equal(Number.isNaN(\"NaN\"), false);\n\tproclaim.equal(Number.isNaN(undefined), false);\n\tproclaim.equal(Number.isNaN({}), false);\n\tproclaim.equal(Number.isNaN(\"blabla\"), false);\n\tproclaim.equal(Number.isNaN(true), false);\n\tproclaim.equal(Number.isNaN(37), false);\n\tproclaim.equal(Number.isNaN(\"37\"), false);\n});"}