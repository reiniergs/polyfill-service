{"aliases":["default-3.3","default-3.4","default-3.5","default-3.6","default","es5","modernizr:es5array"],"browsers":{"ie":"6 - 8"},"spec":"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.reduceright","docs":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight","detectSource":"'reduceRight' in Array.prototype","testSource":"","baseDir":"Array/prototype/reduceRight","hasTests":true,"testsSource":"/* eslint-env mocha, browser*/\n/* global proclaim, it */\n\nvar spycalls = [];\n\nvar spy = function() {\n\tspycalls.push([].slice.call(arguments));\n}\n\nbeforeEach(function () {\n\tspycalls = [];\n});\n\nit('should pass the correct arguments to the callback', function () {\n\t[1,2,3].reduceRight(spy);\n\tproclaim.equal(spycalls.length, 2);\n\tproclaim.deepEqual(spycalls[0], [3, 2, 1, [1,2,3]]);\n});\nit('should start with the right initialValue', function () {\n\t[1,2,3].reduceRight(spy, 0);\n\tproclaim.equal(spycalls.length, 3);\n\tproclaim.deepEqual(spycalls[0], [0, 3, 2, [1,2,3]]);\n});\nit('should not affect elements added to the array after it has begun', function () {\n\tvar arr = [1,2,3], i = 0;\n\tarr.reduceRight(function (a, b) {\n\t\ti++;\n\t\tif (i <= 4) {\n\t\t\tarr.push(a + 3);\n\t\t}\n\t\treturn b;\n\t});\n\tproclaim.deepEqual(arr, [1,2,3,6,5]);\n\tproclaim.equal(i, 2);\n});\nit('should work as expected for empty arrays', function () {\n\tproclaim.throws(function () {\n\t\t[].reduceRight(spy);\n\t});\n\tproclaim.equal(spycalls.length, 0);\n});\nit('should throw correctly if no callback is given', function () {\n\tproclaim.throws(function () {\n\t\t[1,2,3].reduceRight();\n\t});\n});\nit('should return the expected result', function () {\n\tproclaim.deepEqual([1,2,3,4,5,6,7].reduceRight(function (a, b) {\n\t\treturn String(a || '') + String(b || '');\n\t}), [7,6,5,4,3,2,1].join(''));\n});\nit('should return the expected result with a string', function () {\n\tproclaim.deepEqual(Array.prototype.reduceRight.call('1234567', function (a, b) {\n\t\treturn String(a || '') + String(b || '');\n\t}), [7,6,5,4,3,2,1].join(''));\n});\nit('should not directly affect the passed array', function () {\n\tvar test = [1,2,3];\n\tvar copy = [1,2,3];\n\ttest.reduceRight(function (a, b) {\n\t\treturn a + b;\n\t});\n\tproclaim.deepEqual(test, copy);\n});\nit('should skip non-set values', function () {\n\tvar test = [1,2,3];\n\tdelete test[1];\n\tvar visited = {};\n\ttest.reduceRight(function (a, b) {\n\t\tif (a) { visited[a] = true; }\n\t\tif (b) { visited[b] = true; }\n\t\treturn 0;\n\t});\n\tproclaim.deepEqual(visited, { 1: true, 3: true });\n});\nit('should return an array with length 1', function () {\n\tproclaim.equal([1,2,3].reduceRight.length, 1);\n});"}