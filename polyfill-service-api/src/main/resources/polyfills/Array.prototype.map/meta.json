{"aliases":["default-3.3","default-3.4","default-3.5","default-3.6","default","es5","modernizr:es5array","blissfuljs"],"browsers":{"ie":"6 - 8"},"spec":"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.map","docs":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map","detectSource":"'map' in Array.prototype","testSource":"","baseDir":"Array/prototype/map","hasTests":true,"testsSource":"/* eslint-env mocha, browser*/\n/* global proclaim, it */\n\nvar callback;\nvar testSubject;\nbeforeEach(function () {\n\tvar i = 0;\n\tcallback = function () {\n\t\treturn i++;\n\t};\n\ttestSubject = [2, 3, undefined, true, 'hej', null, false, 0];\n\tdelete testSubject[1];\n});\n\nit('should call callback with the right parameters', function () {\n\tvar args = [];\n\tvar argsspy = function() { args = [].slice.call(arguments); };\n\tvar array = [1];\n\tarray.map(argsspy);\n\tproclaim.deepEqual(args, ['1', 0, array]);\n});\nit('should set the context correctly', function () {\n\tvar context = {};\n\ttestSubject.map(function (o,i) {\n\t\tthis[i] = o;\n\t}, context);\n\tproclaim.deepEqual(context, testSubject);\n});\nit('should set the right context when given none', function () {\n\tvar context;\n\t[1].map(function () {context = this;});\n\tproclaim.strictEqual(context, function () { return this; }.call());\n});\nit('should not change the array it is called on', function () {\n\tvar copy = testSubject.slice();\n\ttestSubject.map(callback);\n\tproclaim.deepEqual(testSubject, copy);\n});\nit('should only run for the number of objects in the array when it started', function () {\n\tvar arr = [1,2,3],\n\t\ti = 0;\n\tarr.map(function (o) {\n\t\tarr.push(o + 3);\n\t\ti++;\n\t\treturn o;\n\t});\n\tproclaim.deepEqual(arr, [1, 2, 3, 4, 5, 6]);\n\tproclaim.equal(i, 3);\n});\n\n// IE6-8 does not distinguish between dense and sparse arrays\n// it('should properly translate the values as according to the callback', function () {\n// \tvar result = testSubject.map(callback),\n// \t\texpected = [0, 0, 1, 2, 3, 4, 5, 6];\n\n// \tdelete expected[1];\n// \tproclaim.deepEqual(result, expected);\n// });\nit('should skip non-existing values', function () {\n\tvar array = [1, 2, 3, 4],\n\t\ti = 0;\n\tdelete array[2];\n\tarray.map(function () {\n\t\ti++;\n\t});\n\tproclaim.equal(i, 3);\n});"}