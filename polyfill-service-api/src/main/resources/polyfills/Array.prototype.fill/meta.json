{"aliases":["es6","modernizr:es6array","default-3.4","default-3.5","default-3.6","default"],"browsers":{"ie":"6 - 11","safari":"<= 7","firefox":"< 31","chrome":"< 45","android":"*","ios_saf":"<= 7","samsung_mob":"<5"},"dependencies":["Object.defineProperty"],"spec":"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.fill","docs":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill","detectSource":"'fill' in Array.prototype","testSource":"","baseDir":"Array/prototype/fill","hasTests":true,"testsSource":"/* eslint-env mocha, browser*/\n/* global proclaim, it */\n\nit('exists', function () {\n\tproclaim.ok(Array.prototype.fill);\n});\n\nit('has correct instance', function () {\n\tproclaim.isInstanceOf(Array.prototype.fill, Function);\n});\n\nit('has correct name', function () {\n\tfunction nameOf(fn) {\n\t\treturn Function.prototype.toString.call(fn).match(/function\\s*([^\\s]*)\\(/)[1];\n\t}\n\tproclaim.equal(nameOf(Array.prototype.fill), 'fill');\n});\n\nit('has correct argument length', function () {\n\tproclaim.equal(Array.prototype.fill.length, 1);\n});\n\nit('fills whole array when using only one argument', function () {\n\tproclaim.deepEqual([1, 2, 3].fill(0), [0, 0, 0]);\n});\n\nfunction compareArray(a, b) {\n  if (b.length !== a.length) {\n    return proclaim.fail(a, b, 'proclaim.deepEqualed an array of length ' + b.length + ', received array of length ' + a.length);;\n  }\n\n  for (var i = 0; i < a.length; i++) {\n    if (b[i] !== a[i]) {\n      return proclaim.fail(a[i], b[i], 'proclaim.deepEqualed item in array index ' + i + ' to be ' + b[i] + ', received ' + a[i]);;\n    }\n  }\n  return true;\n}\n\n\nit('fills whole array with undefined if passed no arguments', function () {\n\tproclaim.equal(compareArray([1, 2, 3].fill(), [undefined, undefined, undefined]), true);\n});\n\nit('starts filling from the start index given by second argument', function () {\n\tproclaim.deepEqual([1, 2, 3, 4, 5, 6].fill(0, 3), [1, 2, 3, 0, 0, 0]);\n});\n\nit('can use a negative start index', function () {\n\tproclaim.deepEqual([1, 2, 3, 4, 5, 6].fill(0, -2), [1, 2, 3, 4, 0, 0]);\n});\n\nit('stops filling at the end index given by third argument', function () {\n\tproclaim.deepEqual([1, 2, 3, 4, 5, 6].fill(0, 0, 2), [0, 0, 3, 4, 5, 6]);\n});\n\nit('can use a negative end index', function () {\n\tproclaim.deepEqual([1, 2, 3, 4, 5, 6].fill(0, 1, -2), [1, 0, 0, 0, 5, 6]);\n});\n\nit('does not fill if start index is larger than array', function () {\n\tproclaim.deepEqual([1, 2, 3].fill(0, 5), [1, 2, 3]);\n});\n\n// `this` tests\n\nit('works on array-like objects', function () {\n  proclaim.deepEqual([].fill.call({ length: 3 }, 4), {0: 4, 1: 4, 2: 4, length: 3});\n});\n\nit('returns the same array', function () {\n  var arr = [];\n  var result = arr.fill(1);\n\n  proclaim.deepEqual(result, arr);\n});\n\n// start parameter tests\n\nit('undefined start coerced to 0', function () {\n  proclaim.deepEqual([0, 0].fill(1, undefined), [1, 1]);\n});\n\nit('null start coerced to 0', function () {\n  proclaim.deepEqual([0, 0].fill(1, null), [1, 1]);\n});\n\nit('true start coerced to 1', function () {\n  proclaim.deepEqual([0, 0].fill(1, true), [0, 1]);\n});\n\nit('false start coerced to 0', function () {\n  proclaim.deepEqual([0, 0].fill(1, false), [1, 1]);\n});\n\nit('NaN start coerced to 0', function () {\n  proclaim.deepEqual([0, 0].fill(1, NaN), [1, 1]);\n});\n\nit('string start coerced to integer', function () {\n  proclaim.deepEqual([0, 0].fill(1, '1'), [0, 1]);\n});\n\nit('float start coerced to integer', function () {\n  proclaim.deepEqual([0, 0].fill(1, 1.5), [0, 1]);\n});\n\n// end parameter tests\n\nit('undefined end coerced to length of `this`', function () {\n  proclaim.deepEqual([0, 0].fill(1, 0, undefined), [1, 1]);\n});\n\nit('null end coerced to 0', function () {\n  proclaim.deepEqual([0, 0].fill(1, 0, null), [0, 0]);\n});\n\nit('true end coerced to 1', function () {\n  proclaim.deepEqual([0, 0].fill(1, 0, true), [1, 0]);\n});\n\nit('false end coerced to 0', function () {\n  proclaim.deepEqual([0, 0].fill(1, 0, false), [0, 0]);\n});\n\nit('NaN end coerced to 0', function () {\n  proclaim.deepEqual([0, 0].fill(1, 0, NaN), [0, 0]);\n});\n\nit('string end coerced to integer', function () {\n  proclaim.deepEqual([0, 0].fill(1, 0, '1'), [1, 0]);\n});\n\nit('float end coerced to integer', function () {\n  proclaim.deepEqual([0, 0].fill(1, 0, 1.5), [1, 0]);\n});"}