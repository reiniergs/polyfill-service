{"browsers":{"chrome":"*","firefox":"*","ie":"*","ie_mob":"10 - *","opera":"*","safari":"*","firefox_mob":"*","samsung_mob":"*"},"dependencies":["Array.prototype.includes"],"notes":["This feature was deprecated since it was found to [break older versions of Mootools](https://esdiscuss.org/topic/having-a-non-enumerable-array-prototype-contains-may-not-be-web-compatible).  Use `Array.prototype.includes` instead."],"detectSource":"'contains' in Array.prototype","testSource":"","baseDir":"Array/prototype/contains","hasTests":true,"testsSource":"/* eslint-env mocha, browser*/\n/* global proclaim, it */\n\nit('has correct instance', function () {\n\tproclaim.isInstanceOf(Array.prototype.contains, Function);\n});\n\n// Skipped because contains is now just an alias to includes\nit.skip('has correct name', function () {\n\tfunction nameOf(fn) {\n\t\treturn Function.prototype.toString.call(fn).match(/function\\s*([^\\s]*)\\(/)[1];\n\t}\n\tproclaim.equal(nameOf(Array.prototype.contains), 'contains');\n});\n\nit('has correct argument length', function () {\n\tproclaim.equal(Array.prototype.contains.length, 1);\n});\n\nit('handles arrays', function () {\n\tproclaim.equal([10, 11, 12, 13].contains(12), true);\n\tproclaim.equal([10, 11, 12, 13].contains(14), false);\n\tproclaim.equal([10, 11, 12, 13].contains(13, 4), false);\n\tproclaim.equal([10, 11, 12, 13].contains(13, -1), true);\n});\n\nit('handles arrays of strings', function () {\n\tproclaim.equal(['a', 'b', 'c'].contains('foo'), false);\n\tproclaim.equal(['1', '2', '3'].contains('foo'), false);\n\tproclaim.equal(['a', 'b', 'c'].contains(1), false);\n\tproclaim.equal(['1', '2', '3'].contains(3), false);\n\tproclaim.equal(['1', '2', '3'].contains('3'), true);\n});\n\nit('handles arrays using SameValueZero equality algorithm', function () {\n\tproclaim.equal([-0, 11, 12, 13].contains(+0), true);\n\tproclaim.equal([+0, 11, 12, 13].contains(-0), true);\n\tproclaim.equal([NaN, 11, 12, 13].contains(NaN), true);\n});\n\nit('handles array-like objects', function () {\n\tvar\n\t// 3: 0 is ignored because length omits it\n\tobject = { 0: NaN, 1: 11, 2: 12, 3: 13, length: 3 };\n\n\tproclaim.equal(Array.prototype.contains.call(object, 12), true);\n\tproclaim.equal(Array.prototype.contains.call(object, 13), false);\n\tproclaim.equal(Array.prototype.contains.call(object, 13, 3), false);\n\tproclaim.equal(Array.prototype.contains.call(object, 12, -1), true);\n\tproclaim.equal(Array.prototype.contains.call(object, NaN), true);\n});\n\nit('handles array-like objects with out-of-range lengths', function () {\n\tvar\n\tobject = { 0: 10, 1: 11, 2: 12, 3: 13, length: -Infinity };\n\n\tproclaim.equal(Array.prototype.contains.call(object, 10), false);\n\tproclaim.equal(Array.prototype.contains.call(object, 10), false);\n});"}