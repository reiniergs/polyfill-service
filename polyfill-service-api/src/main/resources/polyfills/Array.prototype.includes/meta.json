{"aliases":["es7","modernizr:es7array"],"browsers":{"chrome":"<47","firefox":"<=42","ie":"*","opera":"*","safari":"<9","ios_saf":"<9","ios_chr":"*","android":"*","op_mob":"*","ie_mob":"*","firefox_mob":"*","samsung_mob":"<5","bb":"10 - *"},"license":"CC0","spec":"https://github.com/tc39/Array.prototype.includes","docs":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes","detectSource":"'includes' in Array.prototype","testSource":"","baseDir":"Array/prototype/includes","hasTests":true,"testsSource":"/* eslint-env mocha, browser*/\n/* global proclaim, it */\n\nit('has correct instance', function () {\n\tproclaim.isInstanceOf(Array.prototype.includes, Function);\n});\n\nit('has correct name', function () {\n\tfunction nameOf(fn) {\n\t\treturn Function.prototype.toString.call(fn).match(/function\\s*([^\\s]*)\\(/)[1];\n\t}\n\tproclaim.equal(nameOf(Array.prototype.includes), 'includes');\n});\n\nit('has correct argument length', function () {\n\tproclaim.equal(Array.prototype.includes.length, 1);\n});\n\nit('handles arrays', function () {\n\tproclaim.equal([10, 11, 12, 13].includes(12), true);\n\tproclaim.equal([10, 11, 12, 13].includes(14), false);\n\tproclaim.equal([10, 11, 12, 13].includes(13, 4), false);\n\tproclaim.equal([10, 11, 12, 13].includes(13, -1), true);\n});\n\nit('handles arrays of strings', function () {\n\tproclaim.equal(['a', 'b', 'c'].includes('foo'), false);\n\tproclaim.equal(['1', '2', '3'].includes('foo'), false);\n\tproclaim.equal(['a', 'b', 'c'].includes(1), false);\n\tproclaim.equal(['1', '2', '3'].includes(3), false);\n\tproclaim.equal(['1', '2', '3'].includes('3'), true);\n});\n\nit('handles arrays using SameValueZero equality algorithm', function () {\n\tproclaim.equal([-0, 11, 12, 13].includes(+0), true);\n\tproclaim.equal([+0, 11, 12, 13].includes(-0), true);\n\tproclaim.equal([NaN, 11, 12, 13].includes(NaN), true);\n});\n\nit('handles array-like objects', function () {\n\tvar\n\t// 3: 0 is ignored because length omits it\n\tobject = { 0: NaN, 1: 11, 2: 12, 3: 13, length: 3 };\n\n\tproclaim.equal(Array.prototype.includes.call(object, 12), true);\n\tproclaim.equal(Array.prototype.includes.call(object, 13), false);\n\tproclaim.equal(Array.prototype.includes.call(object, 13, 3), false);\n\tproclaim.equal(Array.prototype.includes.call(object, 12, -1), true);\n\tproclaim.equal(Array.prototype.includes.call(object, NaN), true);\n});\n\nit('handles array-like objects with out-of-range lengths', function () {\n\tvar\n\tobject = { 0: 10, 1: 11, 2: 12, 3: 13, length: -Infinity };\n\n\tproclaim.equal(Array.prototype.includes.call(object, 10), false);\n\tproclaim.equal(Array.prototype.includes.call(object, 10), false);\n});"}